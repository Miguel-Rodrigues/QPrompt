#**************************************************************************
#
# QPrompt
# Copyright (C) 2020-2021 Javier O. Cordero Pérez
#
# This file is part of QPrompt.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#**************************************************************************


set(qprompt_SRCS
    main.cpp
    prompter/documenthandler.cpp
    prompter/markersmodel.cpp
    #prompter/timer/promptertimer.cpp
)

set(qprompt_HDRS
    prompter/documenthandler.h
    prompter/markersmodel.h
    #prompter/timer/promptertimer.h
)

set(qprompt_ASSETS
    assets.qrc
)

if (NOT APPLE AND NOT ANDROID)
    set(ICONS_FOLDER ${CMAKE_CURRENT_SOURCE_DIR}/icons/hicolor)
    set(RASTER_ICONS
        ${ICONS_FOLDER}/16-apps-com.cuperino.qprompt.png
        ${ICONS_FOLDER}/32-apps-com.cuperino.qprompt.png
        ${ICONS_FOLDER}/48-apps-com.cuperino.qprompt.png
        ${ICONS_FOLDER}/64-apps-com.cuperino.qprompt.png
        ${ICONS_FOLDER}/128-apps-com.cuperino.qprompt.png
        ${ICONS_FOLDER}/256-apps-com.cuperino.qprompt.png
        ${ICONS_FOLDER}/512-apps-com.cuperino.qprompt.png
        # Commenting 1024 sized icon out because although ECM does support it, Flatpak does not...
        # ${ICONS_FOLDER}/1024-apps-com.cuperino.qprompt.png
    )
    set(VECTOR_ICON
        ${ICONS_FOLDER}/sc-apps-com.cuperino.qprompt.svg
    )
    ecm_install_icons(
        ICONS
            ${RASTER_ICONS}
            ${VECTOR_ICON}
        DESTINATION ${KDE_INSTALL_ICONDIR}
        THEME hicolor
    )
    ecm_add_app_icon(qprompt_ICONS
        ICONS ${RASTER_ICONS}
    )
endif()

# Qt5QuickCompiler is an optional dependency. Script must check that it is present before attempting to use
if (Qt5QuickCompiler_FOUND)
    qtquick_compiler_add_resources(qprompt_QML_SRCS qml.qrc)
else ()
    set(qprompt_QML_SRCS qml.qrc)
endif()


if(ANDROID)
    add_library(${PROJECT_NAME}
        ${qprompt_SRCS} ${qprompt_HDRS} ${qprompt_QML_SRCS} ${qprompt_ASSETS})

elseif (WASM)
    #cmake -DCMAKE_TOOLCHAIN_FILE=$HOME/emsdk/emscripten/1.38.27/cmake/Modules/Platform/Emscripten.cmake -DCMAKE_BUILD_TYPE=Debug -G "Unix Makefiles" ~/path/to/CMakeLists.txt
    set(DFEATURE_developer_build ON)
    set(DFEATURE_headersclean OFF)
    set(DWARNINGS_ARE_ERRORS OFF)
    set(DFEATURE_precompile_header OFF)
    set(DBUILD_EXAMPLES OFF)
    set(DBUILD_TESTING OFF)
    set(DCMAKE_GENERATOR Ninja)
    #set(DQT_HOST_PATH ~/Qt/6.2.0/wasm_32/)
    #set(Qt5_DIR "~/Qt/6.2.0/wasm_32/lib/cmake/Qt5")
    #set(Qt5Widgets_DIR "~/Qt/6.2.0/wasm_32/lib/cmake/Qt5Widgets")
    #set(Qt5Gui_DIR "~/Qt/6.2.0/wasm_32/lib/cmake/Qt5Gui")
    #set(Qt5Core_DIR "~/Qt/6.2.0/wasm_32/lib/cmake/Qt5Core")
    #set(DCMAKE_TOOLCHAIN_FILE /path/to/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake)
    set(DFEATURE_threads ON)
    set(DFEATURE_debug ON)
    set(DFEATURE_opengles3 ON)
    set(DQT_QMAKE_DEVICE_OPTIONS EMSCRIPTEN_ASYNCIFY=1)

elseif (WIN32)
    if (MSVC)
        add_definitions(-D_AFXDLL)
        set(CMAKE_MFC_FLAG 2)
    endif()
    add_executable(${PROJECT_NAME} WIN32
        ${qprompt_SRCS} ${qprompt_HDRS} ${qprompt_QML_SRCS} ${qprompt_ASSETS} ${qprompt_ICONS})

elseif (APPLE)
    # These are substituted by CMake into plist.in.
    set(MACOSX_BUNDLE_DISPLAY_NAME "QPrompt")
    set(MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/Info.plist.in)
    set(MACOSX_BUNDLE_GUI_IDENTIFIER "com.cuperino.qprompt")
    set(MACOSX_BUNDLE_BUNDLE_NAME "QPrompt")
    set(MACOSX_BUNDLE_DISPLAY_NAME "QPrompt")
    set(MACOSX_BUNDLE_INFO_STRING "QPrompt - Teleprompter Software for Content Creators")
    set(MACOSX_BUNDLE_LONG_VERSION_STRING "QPrompt ${RELEASE_SERVICE_VERSION}")
    set(MACOSX_BUNDLE_SHORT_VERSION_STRING "${RELEASE_SERVICE_VERSION_MAJOR}.${RELEASE_SERVICE_VERSION_MINOR}")
    set(MACOSX_BUNDLE_BUNDLE_VERSION "${RELEASE_SERVICE_VERSION}")
    set(MACOSX_BUNDLE_COPYRIGHT "2021 Javier O. Cordero Pérez")
    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # generated by CMake. This variable contains the .icns file name,
    # without the path.
    set(MACOSX_BUNDLE_ICON_FILE "qprompt.icns")
    # And the following tells CMake where to find and install the file itself.
    set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/icons/qprompt.icns")
    set_source_files_properties(${app_icon_macos} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
    #
    add_executable(${PROJECT_NAME} MACOSX_BUNDLE
        ${qprompt_SRCS} ${qprompt_HDRS} ${qprompt_QML_SRCS} ${qprompt_ASSETS} ${app_icon_macos})

else() # UNIX
    add_executable(${PROJECT_NAME}
        ${qprompt_SRCS} ${qprompt_HDRS} ${qprompt_QML_SRCS} ${qprompt_ASSETS} ${qprompt_ICONS})
endif()

# Libraries
if (ANDROID)
    target_link_libraries(${PROJECT_NAME}
        Qt5::Core
        Qt5::Quick
        Qt5::Svg
        Qt5::Gui
        Qt5::Qml
        Qt5::QuickControls2
        Qt5::AndroidExtras
        Qt5::VirtualKeyboard
        KF5::I18n
        KF5::Kirigami2
        KF5::CoreAddons
    )
elseif (WASM OR IOS)
    target_link_libraries(${PROJECT_NAME}
        Qt5::Core
        Qt5::Quick
        Qt5::Svg
        Qt5::Gui
        Qt5::Qml
        Qt5::QuickControls2
        KF5::I18n
        KF5::Kirigami2
        KF5::CoreAddons
    )
else()
    target_link_libraries(${PROJECT_NAME} PUBLIC
        Qt5::Core
        Qt5::Quick
        Qt5::Gui
        Qt5::Svg
        Qt5::Qml
        Qt5::QuickControls2
        Qt5::Widgets
        KF5::I18n
        KF5::Kirigami2
        KF5::CoreAddons
    )
endif()

# Copy icons that are not font based
#if(ANDROID OR APPLE OR WASM OR NOT UNIX)
# Breeze icons names can be found at https://cdn.kde.org/breeze-icons/icons.html
kirigami_package_breeze_icons(ICONS
    application-exit
    auto-transition
    chronometer
    chronometer-pause
    circular-arrow-shape
    configure
    dialog-ok-apply
    document-new
    document-open
    document-open-recent
    document-save
    document-save-as
    document-send
    draw-rectangle
    edit-clear-history
    edit-redo
    edit-undo
    filename-bpm-amarok
    format-fill-color
    format-font-size-more
    format-justify-center
    format-text-color
    gnumeric-object-rectangle
    gnumeric-object-scrollbar
    go-down
    go-next
    go-previous
    go-up
    handle-sort
    help-about
    insert-image
    key-enter
    keyframe
    keyframe-add
    list-remove
    object-flip-horizontal
    object-flip-vertical
    object-rotate-left
    object-rotate-right
    paint-none
    player-time
    sidebar-collapse-left
    sidebar-collapse-right
    tool_color_eraser
    tools-report-bug
    transform-browse
    transform-move-horizontal
    transform-move-vertical
    view-left-close
    view-right-close
    window
    window-duplicate
)
#endif()

# Get static QML. Gets ignored if not a static build
if (Qt5QmlImportScanner_FOUND)
    qt5_import_qml_plugins(${PROJECT_NAME})
endif()


if (WIN32 OR UNIX) # AND NOT ANDROID)
    # install(FILES images/qprompt.svg DESTINATION ${KDE_INSTALL_FULL_ICONDIR}/hicolor/scalable/apps)
    # install(FILES images/qprompt.png DESTINATION ${KDE_INSTALL_FULL_ICONDIR}/hicolor/1024x1024/apps)
    install(FILES com.cuperino.qprompt.appdata.xml DESTINATION ${KDE_INSTALL_METAINFODIR})
    install(PROGRAMS com.cuperino.qprompt.desktop DESTINATION ${KDE_INSTALL_APPDIR})
    install(TARGETS ${PROJECT_NAME} ${KDE_INSTALL_TARGETS_DEFAULT_ARGS})
endif()
